#!/usr/bin/env python
#
# Finds C/C++ files that unnecessarily include a given header file.
#
# This takes the name of a header (.h) file and a starting directory, and
# will look for any files nested within that directory that unnecessarily
# include the given header file.
#
# Every file that directly includes the header but doesn't need to will be
# listed.
#
# This can help a lot with cleaning up a source tree in order reduce build
# time.
#
# To work, this requires that you first install both ctags and cscope.
#
# For example:
#
#    $ find-unused-c-includes factoryFactory.hh src/
#

import os
import subprocess
import sys


def execute(command, ignore_errors=False):
    p = subprocess.Popen(command,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE,
                         shell=False,
                         universal_newlines=True)

    data = p.stdout.readlines()
    rc = p.wait()

    if rc and not ignore_errors:
        sys.stderr.write('Failed to execute command: %s\n%s' % (command, data))
        sys.exit(1)

    return data


def main(args):
    if len(args) < 2:
        print 'Usage: find-unused-c-includes <headerfile> <searchpath>'
        sys.exit(1)

    header_file = args[0]
    search_path = args[1]

    # Get the list of symbols in that file
    tags = execute(['ctags', '-f', '-', header_file])
    symbols = [tag.split('\t')[0] for tag in tags]

    # First pass: Find all files that include this file.
    cmd = ['cscope', '-L', '-R', '-8', header_file, '-s', search_path]

    result = execute(cmd)
    files = [os.path.abspath(line.split(' ')[0]) for line in result]

    matched_files = set()
    remaining_files = set(files)

    # Second pass: Find all files not containing any of these symbols
    for symbol in symbols:
        if not remaining_files:
            break

        cmd = ['cscope', '-L', '-0', symbol] + list(remaining_files)
        result = execute(cmd)

        matched_files.update([file.split(' ')[0] for file in result])
        remaining_files.difference_update(matched_files)

    for file in remaining_files:
        print os.path.relpath(file)


if __name__ == '__main__':
    main(sys.argv[1:])
